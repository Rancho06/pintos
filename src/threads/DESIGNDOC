			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Shu Zhou <shuzhou@usc.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct my_timer {
  int64_t ticks; 			// the time that timer wakes up thread
  struct semaphore lock;	// # times a timer can be hold without blocking
  struct list_elem elem;	// list element
} Timer;
Basically, I want a structure to take care of the process of sleeping/waking a thread.

static struct list sleep_queue;
Need to know which threads are sleeping right now.

static struct semaphore sleep_queue_lock; // the lock access to sleeping list
Need to synchronize/protect access to shared sleep_queue





---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
/* timer_sleep() */
Construct a timer struct and push_back the current thread to the sleeping queue. Then sema_down the timer's semaphore to block the current thread.

/* timer_interrupt() */
If time passed the wake-up time, sema_up the timer's semaphore to wake up the thread. Also remove the thread from the sleeping queue.



>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
I used the provided list_remove function. This is tested to be much faster than implementing the deletion ourselves. That's also why I add list_elem in Timer.




---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
The only shared data is the global sleep_queue. So I use a semaphore to guarantee only one access at a time.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
I used sema_try_down instead of sema_down in timer_interrupt(). So if interrupt occurs during timer_sleep(), it just skips this round and waits for the next interrupt.



---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
Using sema_try_down is better than just simply diable the interrupt for timer_sleep. Apparently diabling the interrupt would solve race condition but not the smartest way. To me, this logic makes more sense.



			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
In smea_up(), I always pick the waiting thread with the highest priority using list_max().



>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
1. Level up the priority of the thread holding the lock
2. Update the priority of this lock
3. Handle nested donation by checking whether the donated thread is being blocked by others.
4. Add this lock to lock holder's holidng lock lists and current thread's waiting lock lists if the lock doesn't exist in lock holder's holding list
5. sema_down and block myself



>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
1. remove the lock from current thread's holding list
2. if this is the last holding donation-related lock, set priority to original priority. If not, set priority to be the max of the remaining lock's priority.
3. call sema_up() and unblock another thread.





---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

I disabled interrupt to protect shared resource: ready_list. When I am getting the max thread from ready_list, an interrupt could potentially change it.
I don't think a lock is appropriate since interrupt is not a thread type. It cannot be blocked using locks.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
This design is safe and efficient. Also, it doesn't have a limit of nested level since every thread will automatically trace back. 

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
